<?php

namespace App;

use Illuminate\Foundation\Auth\User as Authenticatable;
use Hash;
use Request;


class User extends Authenticatable
{
    public $timestamps=true;
    protected function getDateFormat(){
        return time();
    }
    /*protected function asDateTime($value)
    {
        return $value; // TODO: Change the autogenerated stub
    }*/

    public function check_username_password(){
        $username=rq('username');
        $password=rq('password');
        if($username&&$password)
            return [$username,$password];
        else
            return false;
    }
    public  function signup(){
        $user_data=$this->check_username_password();
        if(!$user_data)
            return ['status'=>0,'msg'=>'用户名和密码不能为空'];
        $username=$user_data[0];
        $password=$user_data[1];
        /*检查用户名是否存在*/
        $username_exists=$this
            ->where('username',$username)
            ->exists();
        if($username_exists)
            return ['status'=>0,'msg'=>"用户名已存在"];

        /*加密密码*/
        $password_hash=bcrypt($password);//和Hash::make()一样；

        if(rq('phone'))
            $phone_exists=$this->where('phone','=',rq('phone'))->first();
        if($phone_exists)
            return ['status'=>0,'msg'=>'phone exitst'];
        if(rq('email'))
            $email_exists=$this->where('email','=',rq('email'))->first();
        if($email_exists)
            return ['status'=>0,'msg'=>'email exitst'];

        /*存入数据库*/
        $user=$this;
        $user->email=rq('email');
        $user->phone=rq('phone');
        $user->password=$password_hash;
        $user->username=$username;
        $save_ok=$user->save();
        if($save_ok)
            return ['status' => 1, 'id'=>$user->id];

        return ['status'=>0,'msg'=>'insert bd failed'];
    }
    /*
     * 获取用户信息api
     * */
    public function read(){

        if(!rq('id'))
            return ['status'=>0,'msg'=>'user id require'];
        /*判断是否是当前用户在获取信息
         * */
        $id=rq('id')=='self'? session('user_id'):rq('id');
        /*if($id!=session('user_id'))
            return ['status'=>3,'msg'=>'you have no promission'];*/
        $get=['id','username','intro','avatar_url','created_at'];
        $user=$this->find($id,$get);

        if(!$user)
            return ['status'=>0,'msg'=>'user not exists'];

        $answer_count=answer_ins()->where('id',rq('id'))->count();
        $question_count=question_ins()->where('id',rq('id'))->count();
        $user=$user->toArray();//本来user是对象，要把数据放在里面就把它转化成数组
        $user['answer_count']=$answer_count;
        $user['question_count']=$question_count;
        return ['status'=>1,'data'=>$user];

    }

    /*登陆api*/
    public  function login(){

        /*半段用户名密码是否存在*/
       $user_data=$this->check_username_password();
       if(!$user_data)
           return ['status'=>0,'meg'=>'用户名和密码不能为空'];
       $username=$user_data[0];
       $password=$user_data[1];

       /*判断用户是否存在*/
       $user=$this->where('username',$username)->first();
       if(!$user)
           return ['status'=>0,'meg'=>'用户不存在'];
       $password_db=$user->password;

       /*判断用户s信息*/
       if(!Hash::check($password,$password_db))
            return ['status'=>0,'meg'=>'密码错误'];

       /*session*/
       session()->put('username',$username);
       session()->put('user_id',$user->id);
       return ['status'=>1,'msg'=>'登录成功'];

    }

    /*检查是否登录*/

    public function login_or_out(){
        if(session('user_id'))
            return session('user_id');
        return false;

    }
    /*登出*/
    public function logout(){
          if($this->login_or_out()) {
              //session()->set('person.name','mo');//这样可以嵌套存
              //SESSION()->set('person.name.a','nimabi');
              //session()->flush();//就是把所有的sesseion删除;
              //session()->pull('username');就是把username从session剪切掉；
              session()->forget('username');
              session()->forget('user_id');
              //return redirect('/');//跳转到首页;
              return ['status'=>1];
          }


    }

    /*
     * 修改密码
     * */
    public function change_password(){
        if(!$this->login_or_out())
            return ['status'=>0,'msg'=>'login require'];

        if(!rq('old_password')||!rq('new_password'))
            return ['status'=>0,'msg'=>'new and old password require'];

        $user=$this->find(session('user_id'));
        if(!Hash::check(rq('old_password'),$user->password))
            return ['status'=>0,'msg'=>'old password is wrong'];

        $password=bcrypt(rq('new_password'));
        $user->password=$password;
        return $user->save()?
            ['status'=>1,'msg'=>'change password success']:
            ['status'=>0,'msg'=>'change failed'];
    }

    /*
     * 找回密码
     * */

    public function reset_password(){

        /*
         * 检查是否频繁调用接口
         * */

        if($this->is_roobt())
            return ['status'=>0,'msg'=>'require to munck'];
        /*
         * 查看是否有号码
         * */
        if(!rq('phone'))
            return ['status'=>0,'msg'=>'phone require'];
        /*
         * cha查看电话号码的用户
         * */
        $user=$this->where([
            'phone'=>rq('phone'),
            ])
            ->first();

        /*查看号码用户是否存在
         * */
        if(!$user)
            return ['status'=>0,'msg'=>'phone noy found'];
        $phone_captcha=$this->gerenel_captcha();
        $user->phone_captcha=$phone_captcha;
        if($user->save()){
            $this->phone_sms();
            /*为下一次机器人条用做准备
             * */
            session('last_sms_time',time());
            return ['status'=>1];
        }
        return ['status'=>0,'msg'=>'db fail'];

    }

    /*
     * 发送短信
     * */
    public  function phone_sms(){
        return true;
    }

    /*判断是否是机器人
     * */
    public  function is_roobt($timeDufault=10){
        /*查看接口是否被调用过
         * */
        if(!session('last_sms_time'))
              return false;
        $time=time();
        $last_sms_time=session('last_sms_time');
        $active_time=$time-$last_sms_time;
        return !($active_time>$timeDufault);
    }

    /*
     * 实验生成验证码
     * */
    public  function gerenel_captcha(){
        return rand(11111,99999);
    }

    /*
     * 验证找回密码
     * */

    public function validate_reset_password(){
        /*
         * 查看是否是机器人
         * */
        if($this->is_roobt(3))
            return ['status'=>0,'msg'=>'require to munck'];

        /*
         * 判断新密码，手机，手机验证码是否提交
         * */
        if(!rq('phone')||!rq('phone_captcha')||!rq('new_password'))
            return ['status'=>0,'msg'=>'phone,phone_captcha,new_password require'];
        /*匹配信息是否正确
         * */
        $user=$this->where([
            'phone'=>rq('phone'),
            'phone_captcha'=>rq('phone_captcha')
        ])->first();
        if(!$user)
            return ['status'=>0,'msg'=>'phone or captcha is wrong'];

        /*
         * 存入信号吗
         * */
        $user->password=bcrypt(rq('new_password'));
        session()->put('last_sms_time',time());//在laravel不能直接用session（‘a’,'ja'）之类的原生保存数据
        return $user->save()?
            ['status'=>1]:
            ['status'=>0,'msg'=>'db failed'];
    }

    public function answers(){
        return $this
            ->belongsToMany('App\Answer')
            ->withPivot('vote')
            ->withTimestamps();
    }
    public function userExists(){
        $user=$this->where(rq())->count();
        if(!$user)
            return ['status'=>0,'msg'=>'not found'];
        return ['status'=>1,'msg'=>'user exists'];
    }

    public function phone_exists(){
        $user=$this->where(rq())->first();
        if(!$user)
            return ['status'=>0,'msg'=>'phone not found'];
        return ['status'=>1,'msg'=>'phone exists'];
    }
    public function email_exists(){
        $user=$this->where(rq())->first();
        if(!$user)
            return ['status'=>0,'msg'=>'email not found'];
        return ['status'=>1,'msg'=>'email exists'];
    }
}

